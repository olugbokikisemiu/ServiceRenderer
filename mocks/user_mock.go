// Code generated by MockGen. DO NOT EDIT.
// Source: common/authority/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	authority "github.com/sleekservices/ServiceRenderer/common/authority"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockServiceProvider is a mock of ServiceProvider interface
type MockServiceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProviderMockRecorder
}

// MockServiceProviderMockRecorder is the mock recorder for MockServiceProvider
type MockServiceProviderMockRecorder struct {
	mock *MockServiceProvider
}

// NewMockServiceProvider creates a new mock instance
func NewMockServiceProvider(ctrl *gomock.Controller) *MockServiceProvider {
	mock := &MockServiceProvider{ctrl: ctrl}
	mock.recorder = &MockServiceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProvider) EXPECT() *MockServiceProviderMockRecorder {
	return m.recorder
}

// CreateServiceProvider mocks base method
func (m *MockServiceProvider) CreateServiceProvider(ctx context.Context, r *authority.ServiceRenderer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServiceProvider", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateServiceProvider indicates an expected call of CreateServiceProvider
func (mr *MockServiceProviderMockRecorder) CreateServiceProvider(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServiceProvider", reflect.TypeOf((*MockServiceProvider)(nil).CreateServiceProvider), ctx, r)
}

// FindServiceProviderByID mocks base method
func (m *MockServiceProvider) FindServiceProviderByID(ctx context.Context, Id primitive.ObjectID) (*authority.ServiceRenderer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceProviderByID", ctx, Id)
	ret0, _ := ret[0].(*authority.ServiceRenderer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceProviderByID indicates an expected call of FindServiceProviderByID
func (mr *MockServiceProviderMockRecorder) FindServiceProviderByID(ctx, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceProviderByID", reflect.TypeOf((*MockServiceProvider)(nil).FindServiceProviderByID), ctx, Id)
}

// FindServiceProviderByEmail mocks base method
func (m *MockServiceProvider) FindServiceProviderByEmail(ctx context.Context, email string) (*authority.ServiceRenderer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceProviderByEmail", ctx, email)
	ret0, _ := ret[0].(*authority.ServiceRenderer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceProviderByEmail indicates an expected call of FindServiceProviderByEmail
func (mr *MockServiceProviderMockRecorder) FindServiceProviderByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceProviderByEmail", reflect.TypeOf((*MockServiceProvider)(nil).FindServiceProviderByEmail), ctx, email)
}

// GetAllServiceProvider mocks base method
func (m *MockServiceProvider) GetAllServiceProvider(ctx context.Context) ([]authority.ServiceRenderer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllServiceProvider", ctx)
	ret0, _ := ret[0].([]authority.ServiceRenderer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllServiceProvider indicates an expected call of GetAllServiceProvider
func (mr *MockServiceProviderMockRecorder) GetAllServiceProvider(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllServiceProvider", reflect.TypeOf((*MockServiceProvider)(nil).GetAllServiceProvider), ctx)
}

// UpdateServiceProviderByID mocks base method
func (m *MockServiceProvider) UpdateServiceProviderByID(ctx context.Context, Id primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceProviderByID", ctx, Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServiceProviderByID indicates an expected call of UpdateServiceProviderByID
func (mr *MockServiceProviderMockRecorder) UpdateServiceProviderByID(ctx, Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceProviderByID", reflect.TypeOf((*MockServiceProvider)(nil).UpdateServiceProviderByID), ctx, Id)
}
